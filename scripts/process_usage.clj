(ns process-usage
  (:require [babashka.fs :as fs]
            [babashka.process :as p]
            [clojure.edn :as edn]
            [clojure.pprint :as pp]
            [clojure.string :as str]
            [selmer.parser :as s]))

(def ^:private gnuplot-config-template
  "Selmer gnuplot configuration template to plot two columns worth of
  points to stdout.

  It accepts the following template arguments:

  :title The title of the graph.
  :x-label the x-axis label.
  :y-label the y-axis label.
  :data-path the path to the data file."
  "reset
set term dumb
set border lw 1
unset key
set title '{{title}}'
#set tics scale 0.75
#set xtics 5 rotate
#set ytics 25
set xlabel '{{x-label}}'
# fix for dumb terminal, see https://github.com/xia2/screen19/issues/18
set ylabel '{{y-label}}' offset character {{y-label-offset}},0
set grid
plot '{{data-path}}' with linespoints pt 7 lc \"black\"")


(comment
(-> (plot)
    str/split-lines)
  ;;
  )

(defn- exec-sample
  "Runs the EXEC'utable with ARGS while sampling its performance to a
  file, and returns the path to that file.

  It passes the EXEC and ARGS to `scripts/process-usage.ps1` to do the
  sampling, of which see."
  [exec & args]
  (let [subdir "process-usage-logs"
        anchor (str (fs/path subdir ".anchor"))
        ;; fix annoying ps1 script issue with `\\` in path
        exec (str/replace exec "\\" "/")]
    (spit anchor "")
    (apply p/shell {:err *err*} "powershell" "-File" "scripts/process-usage.ps1" exec args)
    (let [output (-> (fs/modified-since anchor #{subdir})
                     first
                     str)]
      output)))

(defn- plot
  "Returns a text plot of the graph of the timestamp(ms) x WS(K) columns
  in the SAMPLES-PATH data file to standard output.

  The SAMPLES-PATH is a sampling data file generated by
  `scripts/process-usage.ps1`, of which see.

  The graph is plotted with `gnuplot` which is expected to be found in
  the system PATH env variable.

  The `timestamp(ms)` column is normalized to start at time 0 while
  preserving the original difference in ms between timestamps."
  [samples-path]
  (when-not (fs/exists? samples-path)
    (ex-info ":cannot find samples data file." {:samples-path samples-path}))
  (if-let [gnuplot (some-> (fs/which "gnuplot") str)]
    (let [timestamp-kw (keyword "timestamp(ms)")
          y-column (keyword "WS(K)")
          text (slurp samples-path)
          [text-meta & table] (str/split-lines text)
          {:keys [exec _interval-ms args] :as _text-meta} (edn/read-string text-meta)
          exec (fs/file-name exec)
          ;; parse samples lines to vectors and convert fields to
          ;; numbers if possible.
          [header & data] (map #(-> (str/trim %)
                                    (str/split #"\s+")
                                    (->> (map (fn [v] (or (parse-long v) (parse-double v) v))))) table)
          header (map keyword header)
          data (map #(zipmap header %) data)
          ;; Offset timestamps by first value.
          data (let [tm-min (timestamp-kw (first data))]
                 (map #(update % timestamp-kw - tm-min) data))]
      (fs/with-temp-dir
        [td {}]
        (let [out-data (str (fs/path td "data"))
              out-cfg (str (fs/path td "cfg"))
              x-axis timestamp-kw
              y-axis y-column]
          (spit out-data (str/join "\n"  (map #(str/join " " [(x-axis %) (y-axis %)]) data)))
          (spit out-cfg (s/render gnuplot-config-template {:data-path out-data
                                                           :title (str/join " " [exec args])
                                                           :x-label x-axis
                                                           :y-label y-axis
                                                           :y-label-offset (/ (count (name y-axis)) 2)}))
          ;; a backup of the data used to plot the graph.
          (spit (str samples-path ".datapoints") (into [] data))

          (-> (p/shell {:err nil :out :string} gnuplot out-cfg)
              :out))))

    (ex-info ":error cannot locate `gnuplot`." {:system-path (System/getenv "PATH")})))

(defn win-mem-usage-plot
  "[WIN-only] Plots mem usage graphs for each `clojure-lsp[.*].exe` in EXECS-DIR (or `.`).

  The memory usage is collected by running each executable in
  alphabetical order with `diagnostics --dry` args (assuming CWD is
  `clojure-lsp` root) after a clean up, sampling its performance
  characteristics with PowerShell's `Get-Process` (of which see) at
  regular intervals and plotting the `WS(K)` column against each
  interval.

  The `WS(K)` value refers to the pages in memory in KB at the time
  each sample was taken. See the following for more info:

  - https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-process
  - https://superuser.com/questions/618686/private-bytes-vs-working-set-in-process-explorer"
  ([]
   (win-mem-usage-plot "."))
  ([execs-dir]
   (if-not (fs/windows?)
     (ex-info "This task is only available on MS-Windows." {})

     (let [args ["diagnostics" "--dry"]
           execs-dir (or execs-dir ".")
           execs (->> (fs/list-dir execs-dir "clojure-lsp*.exe")
                      (map str)
                      sort)]
       (-> (for [exec execs]
             (do
               (fs/delete-tree ".lsp/.cache")
               (fs/delete-tree ".clj-kondo/.cache")
               (-> (apply exec-sample exec args)
                   plot
                   str/split-lines)))
           concat
           pp/pprint)))))

(comment
  (win-mem-usage-plot)
  ;;
)

(comment
  (-> (plot)
      str/split-lines)
  ;;
  )
